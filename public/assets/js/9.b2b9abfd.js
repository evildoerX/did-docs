(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{224:function(t,e,a){"use strict";a.r(e);var _=a(4),v=Object(_.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6-did-document-syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-did-document-syntax","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. DID Document Syntax")]),t._v(" "),a("p",[t._v("DID文档必须是符合"),a("a",{attrs:{href:""}},[t._v("RFC8259")]),t._v("的单个JSON对象。本文档中的许多概念都是使用JSON-LD语法通过示例介绍的，JSON-LD语法是一种将JSON数据映射到"),a("a",{attrs:{href:""}},[t._v("JSON-LD")]),t._v("定义的RDF语义图模型的格式。本节规范了数据模型（"),a("a",{attrs:{href:"#_3-data-model"}},[t._v("§ 3. Data Model")]),t._v(" 和 "),a("a",{attrs:{href:"#_5-did-documents"}},[t._v("§ 5. DID Documents")]),t._v("）如何在JSON-LD中实现。")]),t._v(" "),a("p",[t._v("虽然仅为JSON和JSON-LD提供了语法映射，但应用程序和服务可以使用任何其他数据表示语法，例如JXD（JSON XDI Data，XDI图模型的序列化格式），XML，YAML或CBOR，它们能够表达数据模型。")]),t._v(" "),a("h2",{attrs:{id:"_6-1-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-json","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.1 JSON")]),t._v(" "),a("p",[a("a",{attrs:{href:"#_3-data-model"}},[t._v(" § 3. Data Model ")]),t._v("中描述的数据模型可以通过将属性值映射到JSON类型，在Javascript对象表示法（JSON）"),a("a",{attrs:{href:""}},[t._v("RFC8259")]),t._v("中进行编码，如下所示：")]),t._v(" "),a("ul",[a("li",[t._v("可表示为IEEE754的数值应该表示为数字类型。")]),t._v(" "),a("li",[t._v("Boolean values应该表示为Boolean type。")]),t._v(" "),a("li",[t._v("Sequence value应该表示为Array type。")]),t._v(" "),a("li",[t._v("Unordered sets of values应该表示为Array type。")]),t._v(" "),a("li",[t._v("Sets of properties应该表示为Object type.。")]),t._v(" "),a("li",[t._v("Empty values 应该表示为 null value.")]),t._v(" "),a("li",[t._v("Other values 应该表示为 String type.")])]),t._v(" "),a("h2",{attrs:{id:"_6-2-json-ld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-json-ld","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.2 JSON-LD")]),t._v(" "),a("p",[t._v("[JSON-LD]是一种基于JSON的格式，用于序列化关联数据。该语法旨在轻松集成到已使用JSON的已部署系统中，并提供从JSON到JSON-LD的平滑升级路径。它主要用于在基于Web的编程环境中使用关联数据，构建可互操作的Web服务以及在基于JSON的存储引擎中存储关联数据。")]),t._v(" "),a("p",[t._v("扩展本规范中描述的数据模型时，JSON-LD非常有用。数据模型的实例在JSON-LD中编码的方式与在JSON中编码的方式相同（第 "),a("a",{attrs:{href:"#_6-1-json"}},[t._v("§ 6.1 JSON")]),t._v("），并添加了@context属性。"),a("a",{attrs:{href:""}},[t._v("JSON-LD Context")]),t._v("在"),a("a",{attrs:{href:""}},[t._v("JSON-LD")]),t._v("规范中有详细描述，其用法在"),a("a",{attrs:{href:"#_5-10-extensibility"}},[t._v("§ 5.10 Extensibility")]),t._v("中进行了详细说明。")]),t._v(" "),a("p",[t._v("通常，本文档中描述的数据模型和语法的设计使开发人员可以将示例复制并粘贴到其软件系统中。该方法的设计目标是提供较低的进入门槛，同时仍确保异构软件系统之间的全球互操作性。本节描述了其中一些方法，这些方法可能会被大多数开发人员忽视，但实施者会对其细节感兴趣。JSON-LD提供的最值得注意的语法糖是：")]),t._v(" "),a("ul",[a("li",[t._v("@id和@type关键字分别别名为id和type，使开发人员能够将此规范用作惯用的JSON。")]),t._v(" "),a("li",[t._v("自动键入数据类型（如integers，dates， units 和URLs），以便为需要它们的用例提供更强大的类型保证。")]),t._v(" "),a("li",[t._v("JSON-LD 1.1的@protected属性功能用于确保不能覆盖此规范定义的术语。这意味着只要在DID文档的顶部进行相同的@context声明，就可以保证使用JSON-LD处理器的实现与不使用JSON-LD处理器的实现之间的互操作性。")])])])},[],!1,null,null,null);e.default=v.exports}}]);