(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{209:function(t,a,e){"use strict";e.r(a);var s=e(4),v=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"语法格式描述规范bnf和abnf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法格式描述规范bnf和abnf","aria-hidden":"true"}},[t._v("#")]),t._v(" 语法格式描述规范BNF和ABNF")]),t._v(" "),e("blockquote",[e("p",[t._v("由于经常研究东西，所以经常涉及语法的定义；以前我都是按照我自己定义的一套语法格式描述规则来进行严谨地描述语法格式，但是我自己设计的这套语法格式描述规则并不通用，所以决定改为通用的语法格式描述规则--ABNF(扩展的巴科斯范式BNF);")])]),t._v(" "),e("h2",{attrs:{id:"_1-巴科斯范式bnf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-巴科斯范式bnf","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 巴科斯范式BNF")]),t._v(" "),e("p",[t._v("巴科斯范式的英文缩写为BNF，它是以美国人巴科斯(Backus)和丹麦人诺尔(Naur)的名字命名的一种形式化的语法表示方法，用来描述语法的一种形式体系，是一种典型的元语言。又称巴科斯-诺尔形式(Backus-Naur form)。它不仅能严格地表示语法规则，而且所描述的语法是与上下文无关的。它具有语法简单，表示明确，便于语法分析和编译的特点。")]),t._v(" "),e("p",[e("strong",[t._v("BNF表示语法规则的方式为：")])]),t._v(" "),e("ul",[e("li",[t._v("非终结符用尖括号括起。")]),t._v(" "),e("li",[t._v("每条规则的左部是一个非终结符，右部是由非终结符和终结符组成的一个符号串，中间一般以::=分开。")]),t._v(" "),e("li",[t._v("具有相同左部的规则可以共用一个左部，各右部之间以直竖“|”隔开。")])]),t._v(" "),e("p",[e("strong",[t._v("BNF中常用的元字符及其表示的意义如下：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('在双引号中的字 "word" 代表着这些字符本身。而double_quote用来代表双引号；\n在双引号外的字（有可能有下划线）代表着语法部分；\n尖括号 < > 内包含的为必选项；\n方括号 [ ] 内包含的为可选项；\n大括号 { } 内包含的为可重复0至无数次的项；\n圆括号 ( ) 内包含的所有项为一组，用来控制表达式的优先级；\n竖线 | 表示在其左右两边任选一项，相当于"OR"的意思；\n::= 是“被定义为”的意思；\n...  表示术语符号；\n斜体字: 参数，在其它地方有解释；\n')])])]),e("h2",{attrs:{id:"_2-扩展的巴科斯范式abnf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-扩展的巴科斯范式abnf","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 扩展的巴科斯范式ABNF")]),t._v(" "),e("p",[t._v("RFC2234 定义了扩展的巴科斯范式(ABNF)。近年来在Internet的定义中 ABNF 被广泛使用。ABNF 做了更多的改进。扩充巴科斯-瑙尔范式(ABNF)基于了巴科斯-瑙尔范式(BNF)，但由它自己的语法和推导规则构成。这种元语言的发起原则是描述作为通信协议(双向规范)的语言的形式系统。它建档于 RFC 4234 中通常充当 IETF 通信协议的定义语言。")]),t._v(" "),e("h3",{attrs:{id:"推导规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推导规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 推导规则")]),t._v(" "),e("p",[t._v("ABNF 规定是一组推导规则，写为：")]),t._v(" "),e("p",[e("code",[t._v("规则 = 定义 ; 注释 CR LF")])]),t._v(" "),e("h3",{attrs:{id:"说明："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说明：","aria-hidden":"true"}},[t._v("#")]),t._v(" 说明：")]),t._v(" "),e("ul",[e("li",[t._v("这里的规则是大小写敏感的非终止符，定义是由定义这个规则的符号序列、一个文档注释组成，并结束于回车换行。")]),t._v(" "),e("li",[t._v("规则名字是大小写不敏感的: "),e("code",[t._v("<rulename>")]),t._v(", "),e("code",[t._v("<Rulename>")]),t._v(", "),e("code",[t._v("<RULENAME>")]),t._v(" 和 "),e("code",[t._v("<rUlENamE>")]),t._v(" 都提及同一个规则。规则名字由开始于一个字母的字母、数字和连字符组成。不要求用尖括号"),e("code",[t._v("(“<”, “>”)")]),t._v(" (如 BNF 那样)包围规则名字。但是它们可以用来界定规则名字，比如在冗文中识别出规则名字的时候。ABNF 使用 7-位 ASCII 编码，在 8-位域中把高位置零。")]),t._v(" "),e("li",[t._v("终结符由一个或多个数值字符指定。数值字符可以指定为跟随着基数(b = 二进制, d = 十进制, x = 十六进制)的一个百分号“%”，随后是这个数值，或数值的串联(用“.” 来指示)。例如回车可以指定为十进制的 %d13 或十六进制的 %x0D。回车换行可以指定为 %d13.10。")]),t._v(" "),e("li",[t._v('文字正文通过使用包围在引号(")中字符串来指定。这些字符串是大小写不敏感的，使用的字符集是 US-ASCII。所以字符串“abc”将匹配“abc”, “Abc”, “aBc”, “abC”, “ABc”, “AbC”, “aBC” 和 “ABC”。对于大小写敏感匹配，必须定义明确的字符: 要匹配 “aBc” 定义将是 %d97 %d66 %d99。')])]),t._v(" "),e("h3",{attrs:{id:"操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作符","aria-hidden":"true"}},[t._v("#")]),t._v(" 操作符")]),t._v(" "),e("p",[t._v("空白被用来分隔定义的各个元素: 要使空格被识别为分割符则必须明确的包含它。")]),t._v(" "),e("h3",{attrs:{id:"串联"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#串联","aria-hidden":"true"}},[t._v("#")]),t._v(" 串联")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("规则1 规则2\n")])])]),e("p",[t._v("规则可以通过列出一序列的规则名字来定义。")]),t._v(" "),e("p",[e("strong",[t._v("示例：")])]),t._v(" "),e("p",[t._v("要匹配字符串“aba”可以使用下列规则:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fu = %x61; a\nbar = %x62; b\nmumble = fu bar fu\n")])])]),e("h3",{attrs:{id:"选择"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("规则1 / 规则2\n")])])]),e("p",[t._v("规则可以通过用反斜杠(“/”)分隔的多选一规则来定义。\n"),e("strong",[t._v("示例：")])]),t._v(" "),e("p",[t._v("要接受规则 "),e("code",[t._v("<fu>")]),t._v(" 或规则 "),e("code",[t._v("<bar>")]),t._v(" 可构造如下规则：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fubar = fu / bar\n")])])]),e("p",[t._v("递增选择")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("规则1 =/ 规则2\n")])])]),e("p",[t._v("可以通过使用在规则名字和定义之间的“=/”来向一个规则增加补充选择。")]),t._v(" "),e("p",[e("strong",[t._v("示例：")])]),t._v(" "),e("p",[t._v("规则")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ruleset = alt1 / alt2 / alt3 / alt4 / alt5\n")])])]),e("p",[t._v("等价于")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ruleset = alt1 / alt2\nruleset =/ alt3\nruleset =/ alt4 / alt5\n")])])]),e("h3",{attrs:{id:"值范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#值范围","aria-hidden":"true"}},[t._v("#")]),t._v(" 值范围")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("%c##-##\n")])])]),e("p",[t._v("数值范围可以通过使用连字符(“-”)来指定。")]),t._v(" "),e("p",[e("strong",[t._v("示例：")])]),t._v(" "),e("p",[t._v("规则")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('OCTAL = "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7"\n')])])]),e("p",[t._v("等价于")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("OCTAL = %x30-37\n")])])]),e("h3",{attrs:{id:"序列分组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列分组","aria-hidden":"true"}},[t._v("#")]),t._v(" 序列分组")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(规则1 规则2)\n")])])]),e("p",[t._v("元素可以放置在圆括号中来组合定义中的规则。\n示例：\n要匹配"),e("code",[t._v("“elem fubar snafu”")]),t._v("或"),e("code",[t._v("“elem tarfu snafu”")]),t._v("可以构造下列规则：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("group = elem (fubar / tarfu) snafu\n")])])]),e("p",[t._v("要匹配"),e("code",[t._v("“elem fubar”")]),t._v("或"),e("code",[t._v("“tarfu snafu”")]),t._v("可以构造下列规则：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("group = elem fubar / tarfu snafu\ngroup = (elem fubar) / (tarfu snafu)\n")])])]),e("h3",{attrs:{id:"可变重复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可变重复","aria-hidden":"true"}},[t._v("#")]),t._v(" 可变重复")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("n*n规则\n")])])]),e("p",[t._v("要指示一个元素的重复可以使用形式"),e("code",[t._v("<a>*<b>")]),t._v("元素。可选的"),e("code",[t._v("<a>")]),t._v(" 给出要包括的元素的最小数目，缺省为 0。可选的"),e("code",[t._v("<b>")]),t._v("给出要包括的元素的最大数目，缺省为无穷。\n对零或多个元素使用 "),e("em",[t._v("元素，对一或多个元素使用 1")]),t._v("元素，对二或三个元素使用 2*3元素。\n特定重复\nn规则")]),t._v(" "),e("p",[t._v("要指示明确数目的元素可使用形式"),e("code",[t._v("<a>")]),t._v("元素，它等价于"),e("code",[t._v("<a>*<a>")]),t._v("元素。\n使用 2DIGIT 得到两个数字，使用 3DIGIT 得到三个数字。(DIGIT 在下面的核心规则中定义)。")]),t._v(" "),e("h3",{attrs:{id:"可选序列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可选序列","aria-hidden":"true"}},[t._v("#")]),t._v(" 可选序列")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[规则]\n")])])]),e("p",[e("strong",[t._v("示例：")])]),t._v(" "),e("p",[t._v("要指示可选元素下列构造是等价的：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[fubar snafu]\n*1(fubar snafu)\n0*1(fubar snafu)\n")])])]),e("h3",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释","aria-hidden":"true"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("; 注释\n")])])]),e("p",[t._v("分号"),e("code",[t._v("(“;”)")]),t._v("开始一个注释并持续到此行的结束。")]),t._v(" "),e("h3",{attrs:{id:"操作符优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作符优先级","aria-hidden":"true"}},[t._v("#")]),t._v(" 操作符优先级")]),t._v(" "),e("p",[t._v("上述操作符有从最紧绑定(binding)到最松绑定的给定优先级:")]),t._v(" "),e("ol",[e("li",[t._v("字符串，名字形成(formation)")]),t._v(" "),e("li",[t._v("注释")]),t._v(" "),e("li",[t._v("值范围")]),t._v(" "),e("li",[t._v("重复")]),t._v(" "),e("li",[t._v("分组，可选")]),t._v(" "),e("li",[t._v("串联")]),t._v(" "),e("li",[t._v("选择")])]),t._v(" "),e("p",[t._v("与串联一起使用选择操作符可以造成混淆，建议使用分组来做明确串联分组。")]),t._v(" "),e("h3",{attrs:{id:"核心规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 核心规则")]),t._v(" "),e("p",[t._v("核心规则定义于 ABNF 标准中；")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"right"}},[t._v("规则")]),t._v(" "),e("th",{staticStyle:{"text-align":"right"}},[t._v("形式定义")]),t._v(" "),e("th",{staticStyle:{"text-align":"right"}},[t._v("意义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("ALPHA")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x41-5A / %x61-7A")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("大写和小写 ASCII 字母 (A-Z a-z)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("DIGIT")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x30-39")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("数字 (0-9)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("HEXDIG")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v('DIGIT / "A" / "B" / "C" / "D" / "E" / "F"')]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("十六进制数字 (0-9 A-F a-f)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("DQUOTE")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x22")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("双引号")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("SP")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x20")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("空格")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("HTAB")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x09")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("水平tab")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("WSP")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("SP / HTAB")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("空格和水平tab")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("LWSP")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("*(WSP / CRLF WSP)")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("线性空白(晚于换行)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("VCHAR")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x21-7E")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("可见(打印)字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("CHAR")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x01-7F")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("任何 7-位 US-ASCII 字符，不包括 NUL")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("OCTET")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x00-FF")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("8 位数据")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("CTL")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x00-1F / %x7F")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("控制字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("CR")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x0D")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("回车")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("LF")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("%x0A")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("换行")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("CRLF")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("CR LF")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("互联网标准换行")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"right"}},[t._v("BIT")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v('"0" / "1"')]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}})])])]),t._v(" "),e("h2",{attrs:{id:"_3-郭斌勇版巴科斯范式abnf-gby"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-郭斌勇版巴科斯范式abnf-gby","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 郭斌勇版巴科斯范式ABNF-GBY")]),t._v(" "),e("blockquote",[e("p",[t._v("对于会正则表达工式的人来说，可能不喜欢喜欢ABNF的重复规则，而更喜欢正则表达工的重复规则（正如我的喜好一样），为了实现类正则的巴科斯范式，我便定义了郭斌勇版巴科斯范式ABNF-GBY；")])]),t._v(" "),e("p",[t._v("郭斌勇版巴科斯范式ABNF-GBY是基本ABNF修改和扩展的，相对于ABNF，有如下区别")]),t._v(" "),e("h3",{attrs:{id:"_1-修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.修改")]),t._v(" "),e("p",[t._v("弃用 ABNF中的重复规则 和 BNF中的可重复项表示{ }，改用如下正则表达式的重复规则，如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("规则{min,max}\n")])])]),e("ul",[e("li",[t._v("表示规则重复次数大于或等于min次，小于或等于max次；")]),t._v(" "),e("li",[t._v("min表示最小的重复次数，默认值为0；")]),t._v(" "),e("li",[t._v("max表示最大的重复次数，默认值为无穷大；")]),t._v(" "),e("li",[t._v("当min或者max被省略时，min或者max取相应默认值；")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("规则{n}\n")])])]),e("p",[t._v("等价于：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("规则{n,n}\n")])])]),e("p",[t._v("表示"),e("code",[t._v("规则")]),t._v("重复n次；")]),t._v(" "),e("h3",{attrs:{id:"_2-增加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-增加","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 增加")]),t._v(" "),e("p",[t._v("相对ABNF，增加以下元字符：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("? : 表示前面的规则重复零次或一次；等价于`{0,1}`；\n+ : 表示前面的规则重复一次或多次(大于等于1次）；等价于`{1,}`;\n* : 表示前面的规则重复任意次；等价于`{0,}`；\n")])])])])},[],!1,null,null,null);a.default=v.exports}}]);