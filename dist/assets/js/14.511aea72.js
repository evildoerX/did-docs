(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{223:function(a,t,D){"use strict";D.r(t);var r=D(4),e=Object(r.a)({},function(){var a=this,t=a.$createElement,D=a._self._c||t;return D("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[D("h1",{attrs:{id:"_11-未来的工作"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-未来的工作","aria-hidden":"true"}},[a._v("#")]),a._v(" 11. 未来的工作")]),a._v(" "),D("blockquote",[D("p",[a._v("本节不具有规范性。")])]),a._v(" "),D("h2",{attrs:{id:"_11-1-did字符长度的上限"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-did字符长度的上限","aria-hidden":"true"}},[a._v("#")]),a._v(" 11.1 DID字符长度的上限")]),a._v(" "),D("p",[a._v("当前规范不对DID的最大长度采取立场。最大可互操作URL长度目前约为2K个字符。QR码可以处理大约4K个字符。使用DID的客户端将负责存储许多DID，并且一些方法可以通过依赖更复杂的签名方案或者将状态添加到用于临时使用的DID中来将一些成本外部化到客户端上。此规范的未来版本应对DID字符长度设置合理限制以最小化外部性。")]),a._v(" "),D("h2",{attrs:{id:"_11-2-等价"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-等价","aria-hidden":"true"}},[a._v("#")]),a._v(" 11.2 等价")]),a._v(" "),D("p",[a._v("在DID文档中包含等价属性（例如equivID），其值为DID数组将允许主体断言两个或更多代表相同主题的DID。此功能具有多种用途，包括支持分布式身份标识符注册管理机构之间的迁移，并提供现有DID与未来分布式身份标识符注册管理机构的前向兼容性。理论上，等效的DID应该具有相同的标识符权限，允许可验证的声明 针对一个DID进行应用于等效的DID。由于验证不同DLT和不同DID方法之间的等效性以及聚合等效DID文档的属性的复杂性，当前规范中未包括等效性。但是，在此规范的未来版本中应支持等效性。")]),a._v(" "),D("h2",{attrs:{id:"_11-3-时间戳"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-时间戳","aria-hidden":"true"}},[a._v("#")]),a._v(" 11.3 时间戳")]),a._v(" "),D("p",[a._v("可验证的时间戳对标识符记录具有重要的实用性。这非常适合DLT，因为大多数都提供某种类型的时间戳机制。尽管存在一些交易成本，但它们是世界上最具审查性的交易订购系统，因此它们几乎是DID文档时间戳的理想选择。在某些情况下，DLT的即时时间是近似值，但是可以精确定义它们的 “中值时间过去”（参见比特币BIP 113）。通用DID文档时间戳机制可以在所有DLT上运行，并且可以通过包括单个事务或事务批处理的机制来运行。通用机制被认为超出了此版本的范围，尽管它可能包含在本规范的未来版本中。")]),a._v(" "),D("h2",{attrs:{id:"_11-4-时间锁和did文档恢复"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-时间锁和did文档恢复","aria-hidden":"true"}},[a._v("#")]),a._v(" 11.4 时间锁和DID文档恢复")]),a._v(" "),D("p",[a._v("第§节 9.8 密钥撤销和恢复 提到了在密钥泄露后可以巧妙地使用时间锁来恢复对DID的控制。该技术依赖于覆盖DID文档的最新更新的能力，该DID文档具有由早期版本的DID文档应用的授权，以便击败攻击者。这种保护取决于添加 时间锁定（参见比特币BIP 65）以保护部分事务链，使用授权块来恢复控制。我们计划在此规范的未来版本中添加对时间锁的支持。")]),a._v(" "),D("h2",{attrs:{id:"_11-5-智能签名"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-5-智能签名","aria-hidden":"true"}},[a._v("#")]),a._v(" 11.5 智能签名")]),a._v(" "),D("p",[a._v("并非所有DLT都支持6.5节中的授权逻辑。因此，在此版本的规范中，必须将所有授权逻辑委派给DID方法规范。潜在的未来解决方案是智能签名规范，其指定任何符合DLT可以实现的用于处理签名控制逻辑的代码。")]),a._v(" "),D("h2",{attrs:{id:"_11-6-可验证的索赔"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-6-可验证的索赔","aria-hidden":"true"}},[a._v("#")]),a._v(" 11.6 可验证的索赔")]),a._v(" "),D("p",[a._v("尽管DID和DID文档构成了分散身份的基础，但它们只是描述其主题的第一步。其余的描述性力量来自收集和有选择地使用可验证的声明。该规范的未来版本将更详细地描述如何将DID和DID文档与可验证的声明生态系统集成并帮助启用。")]),a._v(" "),D("h2",{attrs:{id:"_11-7-备用序列化和图模型"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_11-7-备用序列化和图模型","aria-hidden":"true"}},[a._v("#")]),a._v(" 11.7 备用序列化和图模型")]),a._v(" "),D("p",[a._v("此版本的规范依赖于JSON-LD和RDF图模型来表达DID文档。本规范的未来版本可以为DID文档指定其他语义图格式，例如JXD（JSON XDI数据），这是由 OASIS XDI Core 1.0规范定义的XDI图模型的序列化格式。")])])},[],!1,null,null,null);t.default=e.exports}}]);